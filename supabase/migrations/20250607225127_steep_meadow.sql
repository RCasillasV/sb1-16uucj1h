/*
  # Migración Inicial Consolidada - DoctorSoft Medical CRM

  ## Resumen
  Esta migración consolida todas las operaciones de base de datos necesarias para el sistema DoctorSoft,
  incluyendo la gestión de pacientes, citas médicas, historiales clínicos, prescripciones y usuarios.

  ## 1. Nuevas Tablas
  - `tcBu`: Unidades de negocio
  - `tcPacientes`: Información de pacientes
  - `tcUsuarios`: Usuarios del sistema
  - `tcCodigosPostales`: Códigos postales mexicanos
  - `tcDiagnosticosCIE10`: Catálogo de diagnósticos CIE-10
  - `tcAseguradora`: Catálogo de aseguradoras
  - `appointments`: Citas médicas
  - `clinical_histories`: Historiales clínicos
  - `clinical_evolution`: Evolución clínica
  - `prescriptions`: Recetas médicas
  - `prescription_medications`: Medicamentos por receta
  - `medications`: Catálogo de medicamentos
  - `somatometry_records`: Registros somatométricos
  - `auth_logs`: Logs de autenticación
  - `theme_parameters`: Parámetros de temas

  ## 2. Seguridad
  - RLS habilitado en tablas críticas
  - Políticas de acceso por unidad de negocio
  - Control de acceso basado en roles

  ## 3. Funciones y Procedimientos
  - Función para obtener información de usuario
  - Función para búsqueda de códigos postales
  - Triggers para actualización automática
*/

-- =====================================================
-- 1. TABLAS DE CATÁLOGOS Y CONFIGURACIÓN
-- =====================================================

-- Unidades de Negocio
CREATE TABLE IF NOT EXISTS "tcBu" (
  "idBu" uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  "Nombre" text NOT NULL,
  "Descripcion" text,
  "Calle" text,
  "Colonia" text,
  "Ciudad" text,
  "Estado" text,
  "CP" bigint,
  "RFC" text,
  "IdVigencia" smallint DEFAULT 1
);

-- Códigos Postales Mexicanos
CREATE TABLE IF NOT EXISTS sires."tcCodigosPostales" (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  d_codigo text NOT NULL,
  d_asenta text NOT NULL,
  d_tipo_asenta text,
  d_mnpio text NOT NULL,
  d_estado text NOT NULL,
  d_ciudad text,
  d_CP text,
  c_estado text,
  c_oficina text,
  c_CP text,
  c_tipo_asenta text,
  c_mnpio text,
  id_asenta_cpcons text,
  d_zona text,
  c_cve_ciudad text
);

-- Diagnósticos CIE-10
CREATE TABLE IF NOT EXISTS "tcDiagnosticosCIE10" (
  "Consecutivo" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  created_at timestamptz DEFAULT now(),
  "Catalog_Key" text NOT NULL,
  "Nombre" text NOT NULL,
  "Descripcion" text,
  "Activo" boolean DEFAULT true
);

-- Aseguradoras
CREATE TABLE IF NOT EXISTS "tcAseguradora" (
  "idAs" uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  "Aseguradora" text NOT NULL,
  "URL" text,
  "Contacto" text,
  "Notas" text,
  "Activo" boolean DEFAULT true,
  "idBu" uuid REFERENCES "tcBu"("idBu")
);

-- Parámetros de Temas
CREATE TABLE IF NOT EXISTS theme_parameters (
  theme_id text PRIMARY KEY,
  theme_name text NOT NULL,
  button_primary_color text NOT NULL,
  button_secondary_color text NOT NULL,
  button_text_color text NOT NULL,
  font_size_small text NOT NULL,
  font_size_medium text NOT NULL,
  font_size_large text NOT NULL,
  button_border_radius text NOT NULL,
  button_padding text NOT NULL,
  timestamp_created timestamptz DEFAULT now(),
  is_active boolean DEFAULT true
);

-- =====================================================
-- 2. TABLAS DE USUARIOS Y AUTENTICACIÓN
-- =====================================================

-- Usuarios del Sistema
CREATE TABLE IF NOT EXISTS "tcUsuarios" (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  idusuario uuid REFERENCES auth.users(id),
  idbu uuid NOT NULL REFERENCES "tcBu"("idBu"),
  nombre text NOT NULL,
  email text NOT NULL UNIQUE,
  estado text NOT NULL DEFAULT 'activo' CHECK (estado IN ('activo', 'inactivo')),
  rol text NOT NULL DEFAULT 'asistente' CHECK (rol IN ('admin', 'medico', 'asistente')),
  telefono text,
  fechaultimoacceso timestamptz,
  configuracion jsonb DEFAULT '{}'::jsonb
);

-- Logs de Autenticación
CREATE TABLE IF NOT EXISTS auth_logs (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  created_at timestamptz DEFAULT now(),
  user_id uuid REFERENCES auth.users(id),
  email text NOT NULL,
  ip_address text NOT NULL,
  success boolean NOT NULL,
  attempt_count integer DEFAULT 1,
  locked_until timestamptz,
  user_agent text,
  metadata jsonb DEFAULT '{}'::jsonb
);

-- =====================================================
-- 3. TABLAS DE PACIENTES Y DATOS MÉDICOS
-- =====================================================

-- Pacientes
CREATE TABLE IF NOT EXISTS "tcPacientes" (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  "Nombre" text NOT NULL,
  "Paterno" text NOT NULL,
  "Materno" text,
  "FechaNacimiento" date NOT NULL,
  "CURP" text,
  "RFC" text,
  "Sexo" text NOT NULL CHECK ("Sexo" IN ('Masculino', 'Femenino')),
  "EstadoCivil" text CHECK ("EstadoCivil" IN ('Soltero', 'Casado', 'Viudo', 'Divorciado', 'UnionLibre')),
  "Email" text,
  "Telefono" text,
  "Calle" text,
  "Colonia" text,
  "Asentamiento" text,
  "CodigoPostal" text CHECK ("CodigoPostal" ~ '^[0-9]{5}$'),
  "Poblacion" text,
  "Municipio" text,
  "EntidadFederativa" text,
  "Ocupacion" text,
  "TipoSangre" text CHECK ("TipoSangre" IN ('A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-')),
  "Alergias" text[],
  "ContactoEmergencia" text,
  "Aseguradora" text,
  "Responsable" text,
  "Refiere" text,
  "Observaciones" text,
  "TipoPaciente" text CHECK ("TipoPaciente" IN ('Particular', 'Aseguradora', 'Empresa')),
  "EstadoNacimiento" text,
  "Nacionalidad" text DEFAULT 'Mexicana',
  "Folio" text,
  "Religion" text,
  "LenguaIndigena" text,
  "GrupoEtnico" text,
  "Discapacidad" text,
  deleted_at timestamptz,
  user_id uuid REFERENCES auth.users(id),
  "idBu" uuid NOT NULL REFERENCES "tcBu"("idBu")
);

-- Citas Médicas antiguas pór borrar
CREATE TABLE IF NOT EXISTS appointments (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  patient_id uuid REFERENCES "tcPacientes"(id) ON DELETE CASCADE,
  appointment_date timestamptz NOT NULL,
  status text NOT NULL DEFAULT 'scheduled' CHECK (status IN ('scheduled', 'completed', 'cancelled')),
  reason text NOT NULL,
  notes text,
  cubicle integer NOT NULL DEFAULT 1 CHECK (cubicle BETWEEN 1 AND 3),
  tipo_consulta text NOT NULL DEFAULT 'primera' CHECK (tipo_consulta IN ('primera', 'seguimiento', 'urgencia', 'control')),
  tiempo_evolucion integer,
  unidad_tiempo text CHECK (unidad_tiempo IN ('horas', 'dias', 'semanas', 'meses')),
  sintomas_asociados text[] DEFAULT '{}',
  documentos jsonb DEFAULT '[]',
  campos_adicionales jsonb DEFAULT '{}',
  user_id uuid REFERENCES auth.users(id)
);


-- Citas Médicas  finales
create table public."tcCitas" (
  id uuid not null default gen_random_uuid (),
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  id_paciente uuid not null,
  id_user uuid null default auth.uid (),
  fecha_cita date not null,
  hora_cita time without time zone not null,
  motivo text not null,
  estado text not null default 'programada'::text,
  notas text null,
  urgente boolean null default false,
  consultorio integer not null,
  sintomas text[] null default '{}'::text[],
  documentos jsonb null default '[]'::jsonb,
  tipo_consulta text not null default 'primera'::text,
  tiempo_evolucion integer null,
  unidad_tiempo text null,
  sintomas_asociados text[] null default '{}'::text[],
  campos_adicionales jsonb null default '{}'::jsonb,
  hora_fin time without time zone not null,
  constraint tcCitas_pkey primary key (id),
  constraint tcCitas_id_medico_fkey foreign KEY (id_user) references auth.users (id),
  constraint tcCitas_id_paciente_fkey foreign KEY (id_paciente) references "tcPacientes" (id),
  constraint tcCitas_consultorio_check check (
    (
      (consultorio >= 1)
      and (consultorio <= 3)
    )
  ),
  constraint tcCitas_estado_check check (
    (
      estado = any (
        array[
          'programada'::text,
          'completada'::text,
          'cancelada'::text
        ]
      )
    )
  ),
  constraint tcCitas_tipo_consulta_check check (
    (
      tipo_consulta = any (
        array[
          'primera'::text,
          'seguimiento'::text,
          'urgencia'::text,
          'control'::text
        ]
      )
    )
  ),
  constraint tcCitas_unidad_tiempo_check check (
    (
      unidad_tiempo = any (
        array[
          'horas'::text,
          'dias'::text,
          'semanas'::text,
          'meses'::text
        ]
      )
    )
  )
) TABLESPACE pg_default;

create index IF not exists idx_citas_fecha on public."tcCitas" using btree (fecha_cita) TABLESPACE pg_default;

create index IF not exists idx_citas_medico on public."tcCitas" using btree (id_user) TABLESPACE pg_default;

create index IF not exists idx_citas_paciente on public."tcCitas" using btree (id_paciente) TABLESPACE pg_default;

create index IF not exists idx_citas_tipo on public."tcCitas" using btree (tipo_consulta) TABLESPACE pg_default;



-- Historiales Clínicos
CREATE TABLE IF NOT EXISTS clinical_histories (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  patient_id uuid REFERENCES "tcPacientes"(id) ON DELETE CASCADE,
  history_text text NOT NULL,
  user_id uuid REFERENCES auth.users(id)
);

-- Evolución Clínica
CREATE TABLE IF NOT EXISTS clinical_evolution (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  patient_id uuid REFERENCES "tcPacientes"(id) ON DELETE CASCADE,
  evolution_text text NOT NULL,
  user_id uuid REFERENCES auth.users(id)
);

-- Registros Somatométricos
CREATE TABLE IF NOT EXISTS somatometry_records (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  patient_id uuid REFERENCES "tcPacientes"(id) ON DELETE CASCADE,
  measurement_date date NOT NULL,
  weight numeric(5,2) NOT NULL,
  height numeric(5,2) NOT NULL,
  head_circumference numeric(4,1),
  bmi numeric(4,1),
  age_months integer NOT NULL,
  notes text,
  user_id uuid REFERENCES auth.users(id)
);

-- =====================================================
-- 4. TABLAS DE PRESCRIPCIONES Y MEDICAMENTOS
-- =====================================================

-- Catálogo de Medicamentos
CREATE TABLE IF NOT EXISTS medications (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  name text NOT NULL,
  concentration text NOT NULL,
  presentation text NOT NULL,
  active_compound text NOT NULL,
  contraindications text,
  side_effects text,
  user_id uuid REFERENCES auth.users(id)
);

-- Prescripciones
CREATE TABLE IF NOT EXISTS prescriptions (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  prescription_number text NOT NULL UNIQUE,
  patient_id uuid REFERENCES "tcPacientes"(id) ON DELETE CASCADE,
  issue_date timestamptz NOT NULL DEFAULT now(),
  expiry_date timestamptz,
  status text NOT NULL DEFAULT 'active' CHECK (status IN ('active', 'completed', 'expired', 'cancelled')),
  special_instructions text,
  diagnosis text,
  user_id uuid REFERENCES auth.users(id)
);

-- Medicamentos por Prescripción
CREATE TABLE IF NOT EXISTS prescription_medications (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  created_at timestamptz DEFAULT now(),
  updated_at timestamptz DEFAULT now(),
  prescription_id uuid REFERENCES prescriptions(id) ON DELETE CASCADE,
  medication_id uuid REFERENCES medications(id),
  dosage text NOT NULL,
  frequency text NOT NULL,
  duration text NOT NULL,
  total_quantity text NOT NULL,
  administration_route text NOT NULL,
  special_instructions text,
  user_id uuid REFERENCES auth.users(id)
);

-- =====================================================
-- 5. ÍNDICES PARA OPTIMIZACIÓN
-- =====================================================

-- Índices para tcPacientes
CREATE INDEX IF NOT EXISTS idx_tcpacientes_idbu ON "tcPacientes"("idBu");
CREATE INDEX IF NOT EXISTS idx_tcpacientes_nombre ON "tcPacientes"("Nombre");
CREATE INDEX IF NOT EXISTS idx_tcpacientes_paterno ON "tcPacientes"("Paterno");
CREATE INDEX IF NOT EXISTS idx_tcpacientes_fechanacimiento ON "tcPacientes"("FechaNacimiento");
CREATE INDEX IF NOT EXISTS idx_tcpacientes_user_id ON "tcPacientes"(user_id);

-- Índices para tcUsuarios
CREATE INDEX IF NOT EXISTS idx_usuarios_idbu ON "tcUsuarios"(idbu);
CREATE INDEX IF NOT EXISTS idx_usuarios_email ON "tcUsuarios"(email);
CREATE INDEX IF NOT EXISTS idx_usuarios_rol ON "tcUsuarios"(rol);
CREATE INDEX IF NOT EXISTS idx_usuarios_idusuario ON "tcUsuarios"(idusuario);

-- Índices para appointments
CREATE INDEX IF NOT EXISTS idx_appointments_patient_id ON appointments(patient_id);
CREATE INDEX IF NOT EXISTS idx_appointments_date ON appointments(appointment_date);
CREATE INDEX IF NOT EXISTS idx_appointments_status ON appointments(status);
CREATE INDEX IF NOT EXISTS idx_appointments_user_id ON appointments(user_id);

-- Índices para códigos postales
CREATE INDEX IF NOT EXISTS idx_codigos_postales_codigo ON sires."tcCodigosPostales"(d_codigo);
CREATE INDEX IF NOT EXISTS idx_codigos_postales_estado ON sires."tcCodigosPostales"(d_estado);
CREATE INDEX IF NOT EXISTS idx_codigos_postales_municipio ON sires."tcCodigosPostales"(d_mnpio);

-- Índices para diagnósticos
CREATE INDEX IF NOT EXISTS idx_diagnosticos_catalog_key ON "tcDiagnosticosCIE10"("Catalog_Key");
CREATE INDEX IF NOT EXISTS idx_diagnosticos_nombre ON "tcDiagnosticosCIE10"("Nombre");

-- Índices para prescripciones
CREATE INDEX IF NOT EXISTS idx_prescriptions_patient ON prescriptions(patient_id);
CREATE INDEX IF NOT EXISTS idx_prescriptions_status ON prescriptions(status);
CREATE INDEX IF NOT EXISTS idx_prescription_medications_prescription ON prescription_medications(prescription_id);
CREATE INDEX IF NOT EXISTS idx_medications_name ON medications(name);

-- Índices para historiales
CREATE INDEX IF NOT EXISTS idx_clinical_histories_patient ON clinical_histories(patient_id);
CREATE INDEX IF NOT EXISTS idx_clinical_evolution_patient ON clinical_evolution(patient_id);
CREATE INDEX IF NOT EXISTS idx_somatometry_patient ON somatometry_records(patient_id);

-- Índices para auth_logs
CREATE INDEX IF NOT EXISTS idx_auth_logs_user_email ON auth_logs(email);
CREATE INDEX IF NOT EXISTS idx_auth_logs_created_at ON auth_logs(created_at);

-- =====================================================
-- 6. FUNCIONES Y PROCEDIMIENTOS ALMACENADOS
-- =====================================================

-- Función para obtener información del usuario
CREATE OR REPLACE FUNCTION get_user_idbu(user_id uuid)
RETURNS json
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public,sires
AS $$
DECLARE
    result json;
BEGIN
    SELECT json_build_object(
        'idbu', tu.idbu,
        'business_unit', json_build_object(
            'Nombre', bu."Nombre"
        )
    )
    INTO result
    FROM "tcUsuarios" tu
    LEFT JOIN "tcBu" bu ON tu.idbu = bu."idBu"
    WHERE tu.idusuario = user_id;

    RETURN result;
EXCEPTION
    WHEN others THEN
        RETURN NULL;
END;
$$;

-- Función para búsqueda de códigos postales
CREATE OR REPLACE FUNCTION sires.vbuscar_cp(codpos text)
RETURNS TABLE (
    d_codigo text,
    d_tipo_asenta text,
    d_asenta text,
    d_mnpio text,
    d_estado text,
    d_ciudad text
)
LANGUAGE sql
STABLE
AS $$
    SELECT 
        cp.d_codigo,
        cp.d_tipo_asenta,
        cp.d_asenta,
        cp.d_mnpio,
        cp.d_estado,
        cp.d_ciudad
    FROM "tcCodigosPostales" cp
    WHERE cp.d_codigo = codpos
    ORDER BY cp.d_asenta
    LIMIT 50;
$$;

-- Función para verificar intentos fallidos de autenticación
CREATE OR REPLACE FUNCTION check_failed_attempts()
RETURNS TRIGGER AS $$
BEGIN
  IF NOT NEW.success THEN
    UPDATE auth_logs
    SET 
      attempt_count = attempt_count + 1,
      locked_until = CASE 
        WHEN attempt_count >= 3 THEN now() + interval '30 seconds'
        ELSE NULL
      END
    WHERE email = NEW.email
    AND created_at > now() - interval '30 minutes';
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Función para establecer fecha de expiración de prescripciones
CREATE OR REPLACE FUNCTION set_prescription_expiry()
RETURNS TRIGGER AS $$
BEGIN
  NEW.expiry_date := NEW.issue_date + INTERVAL '30 days';
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Función para actualizar estado de prescripciones
CREATE OR REPLACE FUNCTION update_prescription_status()
RETURNS TRIGGER AS $$
BEGIN
  IF NEW.expiry_date < NOW() THEN
    NEW.status := 'expired';
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- =====================================================
-- 7. TRIGGERS
-- =====================================================

-- Trigger para intentos fallidos de autenticación
CREATE TRIGGER check_failed_attempts_trigger
  AFTER INSERT ON auth_logs
  FOR EACH ROW
  EXECUTE FUNCTION check_failed_attempts();

-- Trigger para establecer fecha de expiración de prescripciones
CREATE TRIGGER set_prescription_expiry_trigger
  BEFORE INSERT ON prescriptions
  FOR EACH ROW
  EXECUTE FUNCTION set_prescription_expiry();

-- Trigger para actualizar estado de prescripciones
CREATE TRIGGER update_prescription_status_trigger
  BEFORE UPDATE ON prescriptions
  FOR EACH ROW
  EXECUTE FUNCTION update_prescription_status();

-- =====================================================
-- 8. CONFIGURACIÓN DE SEGURIDAD (RLS)
-- =====================================================

-- Habilitar RLS en tablas críticas
ALTER TABLE "tcPacientes" ENABLE ROW LEVEL SECURITY;
ALTER TABLE "tcUsuarios" ENABLE ROW LEVEL SECURITY;
ALTER TABLE appointments ENABLE ROW LEVEL SECURITY;
ALTER TABLE clinical_histories ENABLE ROW LEVEL SECURITY;
ALTER TABLE clinical_evolution ENABLE ROW LEVEL SECURITY;
ALTER TABLE somatometry_records ENABLE ROW LEVEL SECURITY;
ALTER TABLE prescriptions ENABLE ROW LEVEL SECURITY;
ALTER TABLE prescription_medications ENABLE ROW LEVEL SECURITY;
ALTER TABLE medications ENABLE ROW LEVEL SECURITY;
ALTER TABLE auth_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE sires."tcCodigosPostales" ENABLE ROW LEVEL SECURITY;
ALTER TABLE theme_parameters ENABLE ROW LEVEL SECURITY;

-- =====================================================
-- 9. POLÍTICAS DE SEGURIDAD
-- =====================================================

-- Políticas para tcPacientes
CREATE POLICY "Access patients in same business unit"
ON "tcPacientes"
FOR ALL
TO authenticated
USING (
  "idBu" IN (
    SELECT idbu 
    FROM "tcUsuarios" 
    WHERE idusuario = auth.uid()
  )
);

-- Políticas para tcUsuarios
CREATE POLICY "Users can view their own record"
ON "tcUsuarios"
FOR SELECT
TO authenticated
USING (idusuario = auth.uid());

CREATE POLICY "Users can view records in their business unit"
ON "tcUsuarios"
FOR SELECT
TO authenticated
USING (
  idbu IN (
    SELECT idbu 
    FROM "tcUsuarios" 
    WHERE idusuario = auth.uid()
  )
);

CREATE POLICY "Admins can manage users in their business unit"
ON "tcUsuarios"
FOR ALL
TO authenticated
USING (
  EXISTS (
    SELECT 1 
    FROM "tcUsuarios" admin 
    WHERE admin.idusuario = auth.uid() 
    AND admin.rol = 'admin'
    AND admin.idbu = "tcUsuarios".idbu
  )
)
WITH CHECK (
  EXISTS (
    SELECT 1 
    FROM "tcUsuarios" admin 
    WHERE admin.idusuario = auth.uid() 
    AND admin.rol = 'admin'
    AND admin.idbu = "tcUsuarios".idbu
  )
);

-- Políticas para appointments
CREATE POLICY "Users can manage appointments"
ON appointments
USING (auth.uid() = user_id);

-- Políticas para clinical_histories
CREATE POLICY "Users can manage their patients' clinical histories"
ON clinical_histories
USING (auth.uid() = user_id);

-- Políticas para clinical_evolution
CREATE POLICY "Users can manage their patients' clinical evolution"
ON clinical_evolution
USING (auth.uid() = user_id);

-- Políticas para somatometry_records
CREATE POLICY "Users can manage their patients' somatometry records"
ON somatometry_records
FOR ALL
TO authenticated
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

-- Políticas para prescriptions
CREATE POLICY "Users can manage prescriptions"
ON prescriptions
USING (auth.uid() = user_id);

-- Políticas para prescription_medications
CREATE POLICY "Users can manage prescription medications"
ON prescription_medications
USING (auth.uid() = user_id);

-- Políticas para medications
CREATE POLICY "Users can manage medications"
ON medications
USING (auth.uid() = user_id);

-- Políticas para auth_logs
CREATE POLICY "Users can view their own auth logs"
ON auth_logs
FOR SELECT
TO authenticated
USING (auth.uid() = user_id);

CREATE POLICY "Allow inserting auth logs"
ON auth_logs
FOR INSERT
TO public
WITH CHECK (true);

-- Políticas para códigos postales
CREATE POLICY "Allow authenticated users to read postal codes"
ON sires."tcCodigosPostales"
FOR SELECT
TO authenticated
USING (true);

-- Políticas para theme_parameters
CREATE POLICY "Allow public read access"
ON theme_parameters
FOR SELECT
TO public
USING (true);

-- =====================================================
-- 10. DATOS INICIALES
-- =====================================================

-- Insertar unidad de negocio por defecto
INSERT INTO "tcBu" ("idBu", "Nombre", "Descripcion") 
VALUES ('00000000-0000-0000-0000-000000000000', 'Unidad Principal', 'Unidad de negocio principal del sistema')
ON CONFLICT ("idBu") DO NOTHING;

-- Insertar temas por defecto
INSERT INTO theme_parameters 
(theme_id, theme_name, button_primary_color, button_secondary_color, button_text_color, 
 font_size_small, font_size_medium, font_size_large, button_border_radius, button_padding)
VALUES
('forest-night', 'Forest Night', '#2D3B2D', '#4A5D4A', '#FFFFFF', 
 '0.875rem', '1rem', '1.25rem', '0.375rem', '0.75rem 1rem'),
('ocean-breeze', 'Ocean Breeze', '#0EA5E9', '#38BDF8', '#FFFFFF',
 '0.875rem', '1rem', '1.25rem', '0.375rem', '0.75rem 1rem'),
('sunset-orange', 'Sunset Orange', '#EA580C', '#F97316', '#FFFFFF',
 '0.875rem', '1rem', '1.25rem', '9999px', '0.75rem 1rem'),
('forest-green', 'Forest Green', '#166534', '#15803D', '#FFFFFF',
 '0.875rem', '1rem', '1.25rem', '0.5rem', '0.75rem 1rem')
ON CONFLICT (theme_id) DO NOTHING;

-- =====================================================
-- 11. PERMISOS PARA FUNCIONES
-- =====================================================

-- Otorgar permisos de ejecución
GRANT EXECUTE ON FUNCTION get_user_idbu(uuid) TO authenticated;
GRANT EXECUTE ON FUNCTION sires.vbuscar_cp(text) TO authenticated;

-- =====================================================
-- FINALIZACIÓN
-- =====================================================

-- Comentario final
COMMENT ON SCHEMA public IS 'DoctorSoft es el CRM Medico- Migración inicial consolidada';